import "tfplan/v2" as tfplan


//find all aws_s3_bucket that don't have a versioning block
s3_without_versioning_block = filter tfplan.resource_changes as _, rc {
	rc.type is "aws_s3_bucket" and
		rc.mode is "managed" and
		(rc.change.actions contains "create" or rc.change.actions contains "update") and
		(keys(rc.change.after) not contains "versioning") 
}

number_of_vialating_s3 = 0

for s3_without_versioning_block as address, bucket {
	print(address + " doesn't have a versioning block configured.")
	number_of_vialating_s3 = number_of_vialating_s3 + 1
}

//find all aws_s3_bucket that will be created/updated and has versioning block
s3_with_versioning_block = filter tfplan.resource_changes as _, rc {
	rc.type is "aws_s3_bucket" and
		rc.mode is "managed" and
		(rc.change.actions contains "create" or rc.change.actions contains "update") and
		keys(rc.change.after) contains "versioning" 
}

//find all aws_s3_bucket that will be created/updated and has versioning block, but don't have mfa_delete set, or have it set to false
for s3_with_versioning_block as address, bucket {
	if bucket.change.after.versioning[0] not contains "mfa_delete" {
		print(address + " doesn't have mfa_delete attribute set.")
		number_of_vialating_s3 = number_of_vialating_s3 + 1
	} else if bucket.change.after.versioning[0]["mfa_delete"] is false {
		print(address + " mfa_delete attribute is set to false.")
		number_of_vialating_s3 = number_of_vialating_s3 + 1
	}
}

main = rule {
	number_of_vialating_s3 == 0
}
